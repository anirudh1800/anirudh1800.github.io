<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JBake</title>
    <link>https://anirudhgali.github.io/</link>
    <atom:link href="https://anirudhgali.github.io//feed.xml" rel="self" type="application/rss+xml" />
    <description>JBake Bootstrap Template</description>
    <language>en-gb</language>
    <pubDate>Sun, 22 Apr 2018 17:50:58 -0700</pubDate>
    <lastBuildDate>Sun, 22 Apr 2018 17:50:58 -0700</lastBuildDate>

    <item>
      <title>Introduction to PKI</title>
      <link>https://anirudhgali.github.io//blog/2016/02/Introduction-to-PKI.html</link>
      <pubDate>Mon, 1 Feb 2016 00:00:00 -0800</pubDate>
      <guid isPermaLink="false">blog/2016/02/Introduction-to-PKI.html</guid>
      	<description>
	&lt;p&gt;In general, the two communicating parties share a secret key in order to transmit encrypted messages between them using some agreed symmetric encryption algorithm. They usually share the secret key since both of them trust each other. But in general, the communication channel used by the parties is not always secure and messages may by sniffed by a middle man knowing the shared secret key.&lt;/p&gt; 
&lt;p&gt;In such scenario, each party maintains their own public-private key pair. Suppose there are two parties, Alice and Bob communicating messages between them. If Alice wants to send a message to bob then Alice encrypts the message with Bob&apos;s public key and later when Bob receives the same encrypted message, he can use his private key to decrypt and read the message and vice-versa from Bob to Alice communication. This is generally what happens in public key cryptography to maintain data integrity and data protection from sniffing by the middle man. Next concept is Digital Signature, signatures are actually generated by trusted authorities like Verisign, Digicert etc. These digital signatures are issued in Digital Certificates. Before going on to digital signature, let&apos;s work on the digital certificate, anyone can obtain a digital certificate to help other entities know that it is an authentic entity. Normally, a digital certificate contains the name of the Issuing Authority, Organization name, Domain, Start and Expiration details, Public key and Digital signature of owner&apos;s public key signed using Issuing Authority&apos;s private key. Private and public key pair for the certificate owner is generated by an algorithm used by CA is also shown in the certificate. Encryption algorithm for signing used by CA is also written in the certificate.&lt;br&gt; Popular asymmetric key generation algorithms are RSA and Diffie-Hellman algorithms. In the case of Digital Signature, the process is reverse i.e encrypt(also called as signing in this case) the message with the sender’s private key. On the other end, signed message is decrypted by the recipient with sender’s public key to verify the authenticity of the sender.&lt;/p&gt; 
&lt;p&gt;Certificate Chains are established through a series of certificates derived from a single root CA&apos;s and intermediate CA&apos;s and leaf certificate. Verification of this chain happens by going up the chain and validating whether valid trusted CA along the path. X.509 Specification defines the structure and details of the certificate.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Use case of Digital Signature in verifying sender’s message(email)&lt;/strong&gt;&lt;br&gt; Digital Signature Signer Process&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Signer calculates the hash value of the message body.&lt;/li&gt; 
 &lt;li&gt;Then signer encrypts this value to a private key operation.&lt;/li&gt; 
 &lt;li&gt;Signer then sends the email with the message along with encrypted hash value.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Digital Signature Verification Process&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Verifier upon receiving the email computes the hash of the received message.&lt;/li&gt; 
 &lt;li&gt;The verifier obtains the signing entity&apos;s public key and uses it to obtain the original hash value based on the transmitted signature. The verifier then compares the value with step 1. If two hashes match, the signature verifies; otherwise, verification fails.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Public Key Infrastructure&lt;/strong&gt;&lt;br&gt; PKI is the infrastructure for managing digital certificates and key pairs obtained using public key cryptography, which allows entities to take advantage of the security it offers. Key management is totally taken by PKI since it involves distributed operations and access to the keys. Main services offered by PKI are Authentication, Integrity, and Confidentiality.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Public Key Based Authentication is based on Challenge Response Based Authentication&lt;/strong&gt;&lt;br&gt; Suppose Alice wants to authenticate Bob, then Alice retrieves the Bob&apos;s certificate for his public key. Then Alice sends the challenge message to Bob. Bob signs the challenge with his private key and responds to Alice. Alice decrypts the signature using Bob&apos;s public key and compares the obtained challenge message with its original challenge message. If both are same, then the Bob that Alice is communicating is authentic. In our case, the user is the Bob and server is Alice. Here Challenge and Response message can be varied according to the needs. There could be N number as challenge and response as N + 1. Or either hash function could be used for this purpose.&lt;/p&gt; 
&lt;p&gt;Each challenge-response sequence should be unique. And it&apos;s better if challenge and response are not the same. Replay attacks try to repeat valid data- transmissions by forging the requests.&lt;/p&gt; 
&lt;p&gt;References:&lt;br&gt; &lt;a href=&quot;https://technet.microsoft.com/en-us/library/aa998077(v=exchg.65).aspx&quot;&gt;https://technet.microsoft.com/en-us/library/aa998077(v=exchg.65).aspx&lt;/a&gt;&lt;/p&gt;
	</description>
    </item>

  </channel> 
</rss>
